//
// Created by hgallegos on 17/08/2022.
//

#include "Camara.h"
#include <omp.h>
#include <iostream>
#include <string>

void Camara::renderizar(){
    pImg = new CImg<BYTE>(w, h, 1, 10);
    CImgDisplay dis_img((*pImg), "Imagen RayCasting en Perspectiva ");
// Algoritmo de Ray Casting
Luz luz;
luz.pos = vec3(10, 30, 20);
luz.color = vec3(1,1,1);
Esfera esf(vec3(3,3,0), 4);
esf.color = vec3(1,0,0);
esf.kd = 0.9;
esf.ks = 0.5;
vec3 color;
Rayo rayo;
rayo.ori = eye;
float t_tmp;
vec3 normal, N, L;
// Para cada pixel lanzar un rayo
for (int x=0; x < w; x++){
    for (int y=0; y < h; y++){
        rayo.dir = -f*ze + a*(y/h -0.5)*ye + b*(x/w-0.5)*xe;
        color = vec3(1,1,0);
        if ( esf.interseccion(rayo, t_tmp, normal)) {
            // componente difusa
            vec3 pi = rayo.ori + t_tmp * rayo.dir;
            N = normal;
            L = luz.pos - pi;
            L.normalize();
            float factor_difuso = N.punto(L);
            vec3 difusa(0,0,0);
            if (factor_difuso > 0) {
                difusa = luz.color * esf.kd * factor_difuso;
            }
            color = esf.color * difusa;
        }
        // pintar el pixel con el color
        (*pImg)(x,h-1-y,0) = (BYTE)(color.x * 255);
        (*pImg)(x,h-1-y,1) = (BYTE)(color.y * 255);
        (*pImg)(x,h-1-y,2) = (BYTE)(color.z * 255);
    }
    dis_img.render((*pImg));
    dis_img.paint();
}
    while (!dis_img.is_closed()) {
        dis_img.wait();
    }
}

void Camara::renderizar(vector<Objeto*> &objetos, vector<Luz*> &luces) {
    int FPS = 24, seconds = 30, frames = FPS*seconds;
    vector<float> center_y = {-10.        ,  -9.97218359,  -9.94436718,  -9.91655076,
        -9.88873435,  -9.86091794,  -9.83310153,  -9.80528512,
        -9.77746871,  -9.74965229,  -9.72183588,  -9.69401947,
        -9.66620306,  -9.63838665,  -9.61057024,  -9.58275382,
        -9.55493741,  -9.527121  ,  -9.49930459,  -9.47148818,
        -9.44367177,  -9.41585535,  -9.38803894,  -9.36022253,
        -9.33240612,  -9.30458971,  -9.2767733 ,  -9.24895688,
        -9.22114047,  -9.19332406,  -9.16550765,  -9.13769124,
        -9.10987483,  -9.08205841,  -9.054242  ,  -9.02642559,
        -8.99860918,  -8.97079277,  -8.94297636,  -8.91515994,
        -8.88734353,  -8.85952712,  -8.83171071,  -8.8038943 ,
        -8.77607789,  -8.74826147,  -8.72044506,  -8.69262865,
        -8.66481224,  -8.63699583,  -8.60917942,  -8.581363  ,
        -8.55354659,  -8.52573018,  -8.49791377,  -8.47009736,
        -8.44228095,  -8.41446453,  -8.38664812,  -8.35883171,
        -8.3310153 ,  -8.30319889,  -8.27538248,  -8.24756606,
        -8.21974965,  -8.19193324,  -8.16411683,  -8.13630042,
        -8.10848401,  -8.08066759,  -8.05285118,  -8.02503477,
        -7.99721836,  -7.96940195,  -7.94158554,  -7.91376912,
        -7.88595271,  -7.8581363 ,  -7.83031989,  -7.80250348,
        -7.77468707,  -7.74687065,  -7.71905424,  -7.69123783,
        -7.66342142,  -7.63560501,  -7.6077886 ,  -7.57997218,
        -7.55215577,  -7.52433936,  -7.49652295,  -7.46870654,
        -7.44089013,  -7.41307371,  -7.3852573 ,  -7.35744089,
        -7.32962448,  -7.30180807,  -7.27399166,  -7.24617524,
        -7.21835883,  -7.19054242,  -7.16272601,  -7.1349096 ,
        -7.10709318,  -7.07927677,  -7.05146036,  -7.02364395,
        -6.99582754,  -6.96801113,  -6.94019471,  -6.9123783 ,
        -6.88456189,  -6.85674548,  -6.82892907,  -6.80111266,
        -6.77329624,  -6.74547983,  -6.71766342,  -6.68984701,
        -6.6620306 ,  -6.63421419,  -6.60639777,  -6.57858136,
        -6.55076495,  -6.52294854,  -6.49513213,  -6.46731572,
        -6.4394993 ,  -6.41168289,  -6.38386648,  -6.35605007,
        -6.32823366,  -6.30041725,  -6.27260083,  -6.24478442,
        -6.21696801,  -6.1891516 ,  -6.16133519,  -6.13351878,
        -6.10570236,  -6.07788595,  -6.05006954,  -6.02225313,
        -5.99443672,  -5.96662031,  -5.93880389,  -5.91098748,
        -5.88317107,  -5.85535466,  -5.82753825,  -5.79972184,
        -5.77190542,  -5.74408901,  -5.7162726 ,  -5.68845619,
        -5.66063978,  -5.63282337,  -5.60500695,  -5.57719054,
        -5.54937413,  -5.52155772,  -5.49374131,  -5.4659249 ,
        -5.43810848,  -5.41029207,  -5.38247566,  -5.35465925,
        -5.32684284,  -5.29902643,  -5.27121001,  -5.2433936 ,
        -5.21557719,  -5.18776078,  -5.15994437,  -5.13212796,
        -5.10431154,  -5.07649513,  -5.04867872,  -5.02086231,
        -4.9930459 ,  -4.96522949,  -4.93741307,  -4.90959666,
        -4.88178025,  -4.85396384,  -4.82614743,  -4.79833102,
        -4.7705146 ,  -4.74269819,  -4.71488178,  -4.68706537,
        -4.65924896,  -4.63143255,  -4.60361613,  -4.57579972,
        -4.54798331,  -4.5201669 ,  -4.49235049,  -4.46453408,
        -4.43671766,  -4.40890125,  -4.38108484,  -4.35326843,
        -4.32545202,  -4.29763561,  -4.26981919,  -4.24200278,
        -4.21418637,  -4.18636996,  -4.15855355,  -4.13073713,
        -4.10292072,  -4.07510431,  -4.0472879 ,  -4.01947149,
        -3.99165508,  -3.96383866,  -3.93602225,  -3.90820584,
        -3.88038943,  -3.85257302,  -3.82475661,  -3.79694019,
        -3.76912378,  -3.74130737,  -3.71349096,  -3.68567455,
        -3.65785814,  -3.63004172,  -3.60222531,  -3.5744089 ,
        -3.54659249,  -3.51877608,  -3.49095967,  -3.46314325,
        -3.43532684,  -3.40751043,  -3.37969402,  -3.35187761,
        -3.3240612 ,  -3.29624478,  -3.26842837,  -3.24061196,
        -3.21279555,  -3.18497914,  -3.15716273,  -3.12934631,
        -3.1015299 ,  -3.07371349,  -3.04589708,  -3.01808067,
        -2.99026426,  -2.96244784,  -2.93463143,  -2.90681502,
        -2.87899861,  -2.8511822 ,  -2.82336579,  -2.79554937,
        -2.76773296,  -2.73991655,  -2.71210014,  -2.68428373,
        -2.65646732,  -2.6286509 ,  -2.60083449,  -2.57301808,
        -2.54520167,  -2.51738526,  -2.48956885,  -2.46175243,
        -2.43393602,  -2.40611961,  -2.3783032 ,  -2.35048679,
        -2.32267038,  -2.29485396,  -2.26703755,  -2.23922114,
        -2.21140473,  -2.18358832,  -2.15577191,  -2.12795549,
        -2.10013908,  -2.07232267,  -2.04450626,  -2.01668985,
        -1.98887344,  -1.96105702,  -1.93324061,  -1.9054242 ,
        -1.87760779,  -1.84979138,  -1.82197497,  -1.79415855,
        -1.76634214,  -1.73852573,  -1.71070932,  -1.68289291,
        -1.6550765 ,  -1.62726008,  -1.59944367,  -1.57162726,
        -1.54381085,  -1.51599444,  -1.48817803,  -1.46036161,
        -1.4325452 ,  -1.40472879,  -1.37691238,  -1.34909597,
        -1.32127955,  -1.29346314,  -1.26564673,  -1.23783032,
        -1.21001391,  -1.1821975 ,  -1.15438108,  -1.12656467,
        -1.09874826,  -1.07093185,  -1.04311544,  -1.01529903,
        -0.98748261,  -0.9596662 ,  -0.93184979,  -0.90403338,
        -0.87621697,  -0.84840056,  -0.82058414,  -0.79276773,
        -0.76495132,  -0.73713491,  -0.7093185 ,  -0.68150209,
        -0.65368567,  -0.62586926,  -0.59805285,  -0.57023644,
        -0.54242003,  -0.51460362,  -0.4867872 ,  -0.45897079,
        -0.43115438,  -0.40333797,  -0.37552156,  -0.34770515,
        -0.31988873,  -0.29207232,  -0.26425591,  -0.2364395 ,
        -0.20862309,  -0.18080668,  -0.15299026,  -0.12517385,
        -0.09735744,  -0.06954103,  -0.04172462,  -0.01390821,
         0.01390821,   0.04172462,   0.06954103,   0.09735744,
         0.12517385,   0.15299026,   0.18080668,   0.20862309,
         0.2364395 ,   0.26425591,   0.29207232,   0.31988873,
         0.34770515,   0.37552156,   0.40333797,   0.43115438,
         0.45897079,   0.4867872 ,   0.51460362,   0.54242003,
         0.57023644,   0.59805285,   0.62586926,   0.65368567,
         0.68150209,   0.7093185 ,   0.73713491,   0.76495132,
         0.79276773,   0.82058414,   0.84840056,   0.87621697,
         0.90403338,   0.93184979,   0.9596662 ,   0.98748261,
         1.01529903,   1.04311544,   1.07093185,   1.09874826,
         1.12656467,   1.15438108,   1.1821975 ,   1.21001391,
         1.23783032,   1.26564673,   1.29346314,   1.32127955,
         1.34909597,   1.37691238,   1.40472879,   1.4325452 ,
         1.46036161,   1.48817803,   1.51599444,   1.54381085,
         1.57162726,   1.59944367,   1.62726008,   1.6550765 ,
         1.68289291,   1.71070932,   1.73852573,   1.76634214,
         1.79415855,   1.82197497,   1.84979138,   1.87760779,
         1.9054242 ,   1.93324061,   1.96105702,   1.98887344,
         2.01668985,   2.04450626,   2.07232267,   2.10013908,
         2.12795549,   2.15577191,   2.18358832,   2.21140473,
         2.23922114,   2.26703755,   2.29485396,   2.32267038,
         2.35048679,   2.3783032 ,   2.40611961,   2.43393602,
         2.46175243,   2.48956885,   2.51738526,   2.54520167,
         2.57301808,   2.60083449,   2.6286509 ,   2.65646732,
         2.68428373,   2.71210014,   2.73991655,   2.76773296,
         2.79554937,   2.82336579,   2.8511822 ,   2.87899861,
         2.90681502,   2.93463143,   2.96244784,   2.99026426,
         3.01808067,   3.04589708,   3.07371349,   3.1015299 ,
         3.12934631,   3.15716273,   3.18497914,   3.21279555,
         3.24061196,   3.26842837,   3.29624478,   3.3240612 ,
         3.35187761,   3.37969402,   3.40751043,   3.43532684,
         3.46314325,   3.49095967,   3.51877608,   3.54659249,
         3.5744089 ,   3.60222531,   3.63004172,   3.65785814,
         3.68567455,   3.71349096,   3.74130737,   3.76912378,
         3.79694019,   3.82475661,   3.85257302,   3.88038943,
         3.90820584,   3.93602225,   3.96383866,   3.99165508,
         4.01947149,   4.0472879 ,   4.07510431,   4.10292072,
         4.13073713,   4.15855355,   4.18636996,   4.21418637,
         4.24200278,   4.26981919,   4.29763561,   4.32545202,
         4.35326843,   4.38108484,   4.40890125,   4.43671766,
         4.46453408,   4.49235049,   4.5201669 ,   4.54798331,
         4.57579972,   4.60361613,   4.63143255,   4.65924896,
         4.68706537,   4.71488178,   4.74269819,   4.7705146 ,
         4.79833102,   4.82614743,   4.85396384,   4.88178025,
         4.90959666,   4.93741307,   4.96522949,   4.9930459 ,
         5.02086231,   5.04867872,   5.07649513,   5.10431154,
         5.13212796,   5.15994437,   5.18776078,   5.21557719,
         5.2433936 ,   5.27121001,   5.29902643,   5.32684284,
         5.35465925,   5.38247566,   5.41029207,   5.43810848,
         5.4659249 ,   5.49374131,   5.52155772,   5.54937413,
         5.57719054,   5.60500695,   5.63282337,   5.66063978,
         5.68845619,   5.7162726 ,   5.74408901,   5.77190542,
         5.79972184,   5.82753825,   5.85535466,   5.88317107,
         5.91098748,   5.93880389,   5.96662031,   5.99443672,
         6.02225313,   6.05006954,   6.07788595,   6.10570236,
         6.13351878,   6.16133519,   6.1891516 ,   6.21696801,
         6.24478442,   6.27260083,   6.30041725,   6.32823366,
         6.35605007,   6.38386648,   6.41168289,   6.4394993 ,
         6.46731572,   6.49513213,   6.52294854,   6.55076495,
         6.57858136,   6.60639777,   6.63421419,   6.6620306 ,
         6.68984701,   6.71766342,   6.74547983,   6.77329624,
         6.80111266,   6.82892907,   6.85674548,   6.88456189,
         6.9123783 ,   6.94019471,   6.96801113,   6.99582754,
         7.02364395,   7.05146036,   7.07927677,   7.10709318,
         7.1349096 ,   7.16272601,   7.19054242,   7.21835883,
         7.24617524,   7.27399166,   7.30180807,   7.32962448,
         7.35744089,   7.3852573 ,   7.41307371,   7.44089013,
         7.46870654,   7.49652295,   7.52433936,   7.55215577,
         7.57997218,   7.6077886 ,   7.63560501,   7.66342142,
         7.69123783,   7.71905424,   7.74687065,   7.77468707,
         7.80250348,   7.83031989,   7.8581363 ,   7.88595271,
         7.91376912,   7.94158554,   7.96940195,   7.99721836,
         8.02503477,   8.05285118,   8.08066759,   8.10848401,
         8.13630042,   8.16411683,   8.19193324,   8.21974965,
         8.24756606,   8.27538248,   8.30319889,   8.3310153 ,
         8.35883171,   8.38664812,   8.41446453,   8.44228095,
         8.47009736,   8.49791377,   8.52573018,   8.55354659,
         8.581363  ,   8.60917942,   8.63699583,   8.66481224,
         8.69262865,   8.72044506,   8.74826147,   8.77607789,
         8.8038943 ,   8.83171071,   8.85952712,   8.88734353,
         8.91515994,   8.94297636,   8.97079277,   8.99860918,
         9.02642559,   9.054242  ,   9.08205841,   9.10987483,
         9.13769124,   9.16550765,   9.19332406,   9.22114047,
         9.24895688,   9.2767733 ,   9.30458971,   9.33240612,
         9.36022253,   9.38803894,   9.41585535,   9.44367177,
         9.47148818,   9.49930459,   9.527121  ,   9.55493741,
         9.58275382,   9.61057024,   9.63838665,   9.66620306,
         9.69401947,   9.72183588,   9.74965229,   9.77746871,
         9.80528512,   9.83310153,   9.86091794,   9.88873435,
         9.91655076,   9.94436718,   9.97218359,  10.        };
    // center_y = {-20, 0, 20};
    pImg = new CImg<BYTE>(w, h, 1, 3);
    CImgDisplay dis_img((*pImg), "Imagen RayCasting en Perspectiva ");
    float t_tmp, t;
    Objeto *pObj;
    // Luz luz = *(luces[0]);
    vec3 normal, N, L;
    bool hay_interseccion;
    // Para cada pixel lanzar un rayo
    int w_aux = w;
    for (int frame = 1; frame <= frames; frame++) {
        center.y = center_y[frame-1];
        inicializar();
        #pragma omp parallel for
        for (int x=0; x < w_aux; x++){
            for (int y=0; y < h; y++){
                Rayo rayo;
                vec3 color;
                rayo.ori = eye;
                rayo.dir = -f*ze + a*(y/h -0.5)*ye + b*(x/w-0.5)*xe;
                rayo.dir.normalize();
                if (x == 420 and y== h-222){
                    float tmp = 6;
                    color = vec3(1,0,0);
                }
                color = calcularColor(rayo, objetos, luces, 1);

                // pintar el pixel con el color
                (*pImg)(x,h-1-y,0) = (BYTE)(color.x * 255);
                (*pImg)(x,h-1-y,1) = (BYTE)(color.y * 255);
                (*pImg)(x,h-1-y,2) = (BYTE)(color.z * 255);
            }
            dis_img.render((*pImg));
            dis_img.paint();
        }
        string name = "frames/frame_"+std::to_string(frame)+".png";
        cout << name << endl;
        pImg->save(name.c_str());
    }
    while (!dis_img.is_closed()) {
        dis_img.wait();
    }
}

vec3 Camara::calcularColor(Rayo rayo, vector<Objeto*> &objetos, vector<Luz*> &luces, int prof){
    vec3 color(0,0,0);
    float t_tmp, t;
    Objeto *pObj;
    vec3 normal, N, L;
    bool hay_interseccion;
    if ( prof > 7) {
        return color;
    }

    hay_interseccion = false;
    t = 100000;
    for(auto pObjeto : objetos){
        if (pObjeto->interseccion(rayo, t_tmp, normal)) {
            if (t_tmp < t) {
                hay_interseccion = true;
                t = t_tmp;
                N = normal;
                pObj = pObjeto;
            }
        }
    }
    if (hay_interseccion and pObj->luz != nullptr) {
        //color = pObj->getColor(rayo);
        color = pObj->color;

    } else if (hay_interseccion) {
        // componente ambiente
        vec3 ambiente = vec3(0.1, 0.1, 0.1) * pObj->kd;
        vec3 difusa(0, 0, 0);
        vec3 especular(0, 0, 0);

        vec3 pi = rayo.ori + t * rayo.dir;
        vec3 v = -rayo.dir;
        v.normalize();
        for (auto pLuz : luces) {
            //N = normal;
            L = pLuz->pos - pi;
            float longitud = L.modulo();
            L.normalize();


            // calcular si hay sombra
            // lanzar rayo hacia la luz
            Rayo rayo_sombra;
            rayo_sombra.ori = pi + N * 0.01;
            rayo_sombra.dir = L;
            bool sombra = false;


            for (auto pObjeto : objetos) {
                if (pObjeto->luz == nullptr and pObjeto->interseccion(rayo_sombra, t_tmp, normal)) {
                    if (pObjeto->idr == 0 and t_tmp <= longitud) {
                        sombra = true;
                        break;
                    }
                }
            }
            if (sombra) {
                //color = pObj->color * (ambiente);
            } else {
                // componente difusa
                float factor_difuso = N.punto(L);
                if (factor_difuso > 0) {
                    difusa = difusa + pLuz->color * pObj->kd * factor_difuso;
                }
                // componenete difusa si es transparente
                if (pObj->idr > 0) {
                    factor_difuso = (-N).punto(L);
                    if (factor_difuso > 0) {
                        difusa = difusa + pLuz->color * pObj->kd * factor_difuso;
                    }
                }

                // componente especular
                vec3 r = 2 * (L.punto(N)) * N - L;
                r.normalize();
                float factor_especular = r.punto(v);
                if (factor_especular > 0) {
                    especular = especular + pLuz->color * pObj->ks * pow(factor_especular, pObj->n);
                }
                if (pObj->idr > 0) {
                    r = 2 * (L.punto(-N)) * (-N) - L;
                    r.normalize();
                    factor_especular = r.punto(v);
                    if (factor_especular > 0) {
                        especular = especular + pLuz->color * pObj->ks * pow(factor_especular, pObj->n);
                    }
                }
            }
        }

        float kr = pObj->kr;
        float kt = 0;
        bool outside = rayo.dir.punto(N) < 0;
        vec3 bias = 0.001 * N;
        vec3 color_reflexivo(0,0,0);
        vec3 color_refractivo(0,0,0);

        if(pObj->idr > 0) {
            fresnel(rayo.dir, N, pObj->idr, kr);
            if (kr < 1) {
                kt = 1- kr;
                Rayo rayo_refractivo;
                rayo_refractivo.ori = outside ? pi - bias : pi + bias;
                rayo_refractivo.dir = refract(rayo.dir, N, pObj->idr);
                rayo_refractivo.dir.normalize();
                color_refractivo = calcularColor(rayo_refractivo, objetos, luces, prof+1);
            }
        }
        if (kr > 0) {
            Rayo rayo_reflexivo;
            rayo_reflexivo.ori = outside ? pi + bias : pi - bias;
            rayo_reflexivo.dir = 2 * (v.punto(N)) * N - v;
            rayo_reflexivo.dir.normalize();
            color_reflexivo = calcularColor(rayo_reflexivo, objetos, luces, prof + 1);
        }
        color = color + pObj->color * (ambiente + difusa + especular);
        color = color + color_reflexivo* kr + color_refractivo*kt;
        color.max_to_one();
    }
    return color;
}

vec3 Camara::refract(vec3 I, vec3 N, float ior)
{
    float cosi = clamp(-1, 1, I.punto(N));
    float etai = 1, etat = ior;
    vec3 n = N;
    if (cosi < 0) { cosi = -cosi; } else { std::swap(etai, etat); n= -N; }
    float eta = etai / etat;
    float k = 1 - eta * eta * (1 - cosi * cosi);
    return k < 0 ? vec3(0,0,0) : eta * I + (eta * cosi - sqrtf(k)) * n;
}

void Camara::fresnel(vec3 I, vec3 N, float &ior, float &kr)
{
    float cosi = clamp(-1, 1, I.punto(N));
    float etai = 1, etat = ior;
    if (cosi > 0) { std::swap(etai, etat); }
    // Compute sini using Snell's law
    float sint = etai / etat * sqrtf(std::max(0.f, 1 - cosi * cosi));
    // Total internal reflection
    if (sint >= 1) {
        kr = 1;
    }
    else {
        float cost = sqrtf(std::max(0.f, 1 - sint * sint));
        cosi = fabsf(cosi);
        float Rs = ((etat * cosi) - (etai * cost)) / ((etat * cosi) + (etai * cost));
        float Rp = ((etai * cosi) - (etat * cost)) / ((etai * cosi) + (etat * cost));
        kr = (Rs * Rs + Rp * Rp) / 2;
    }
    // As a consequence of the conservation of energy, transmittance is given by:
    // kt = 1 - kr;
}